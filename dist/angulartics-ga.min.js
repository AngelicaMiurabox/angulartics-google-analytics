!function(window,angular,undefined){"use strict";angular.module("angulartics.google.analytics",["angulartics"]).config(["$analyticsProvider",function($analyticsProvider){function detectUniversalAnalytics(){var gaNamespace=window.GoogleAnalyticsObject;return gaNamespace&&window[gaNamespace]}function detectClassicAnalytics(){return angular.isUndefined(window._gaq)}function dimensionsAndMetrics(properties){var key,customData={};for(key in properties)key.indexOf("dimension")&&key.indexOf("metric")||(customData[key]=properties[key]);return customData}$analyticsProvider.settings.pageTracking.trackRelativePath=!0,$analyticsProvider.settings.ga={additionalAccountNames:undefined,additionalAccountHitTypes:{pageview:!0,event:!0,error:!1,timing:!1,setUserProperties:!1,userId:!1},disableEventTracking:null,disablePageTracking:null,userId:null},$analyticsProvider.registerPageTrack(function(path,properties){properties=properties||{},$analyticsProvider.settings.ga.disablePageTracking||dispatchToGa("send",angular.extend(dimensionsAndMetrics(properties),{hitType:"pageview",page:path}))}),$analyticsProvider.registerEventTrack(function(action,properties){if(!$analyticsProvider.settings.ga.disableEventTracking){if(!action&&action+""!="0")return console.log("Missing required argument action");if(properties=properties||{},properties.category=properties.category||"Event",properties.value){var parsed=parseInt(properties.value,10);properties.value=isNaN(parsed)?0:parsed}angular.isFunction(properties.hitCallback)||(properties.hitCallback=null),properties.nonInteraction=properties.nonInteraction||properties.noninteraction,dispatchToGa("send",angular.extend(dimensionsAndMetrics(properties),{hitType:"event",eventCategory:properties.category,eventAction:action,eventLabel:properties.label,eventValue:properties.value,nonInteraction:properties.nonInteraction,page:properties.page||window.location.hash.substring(1)||window.location.pathname,hitCallback:properties.hitCallback}))}}),$analyticsProvider.registerExceptionTrack(function(error,cause){dispatchToGa("send",{hitType:"event",eventCategory:"Exceptions",eventAction:error.toString(),eventLabel:error.stack,nonInteraction:!0,page:window.location.hash.substring(1)||window.location.pathname,isException:!0})}),$analyticsProvider.registerSetUsername(function(userId){$analyticsProvider.settings.ga.userId=userId}),$analyticsProvider.registerSetUserProperties(function(properties){properties&&dispatchToGa("set",dimensionsAndMetrics(properties))}),$analyticsProvider.registerUserTimings(function(properties){return!angular.isObject(properties)||angular.isArray(properties)?console.log("Required argument properties is missing or not an object"):(angular.forEach(["timingCategory","timingVar","timingValue"],function(prop){if(angular.isUndefined(properties[prop]))return console.log("Argument properties missing required property "+prop)}),void dispatchToGa("send",{hitType:"timing",timingCategory:properties.timingCategory,timingVar:properties.timingVar,timingValue:properties.timingVar,timingLabel:properties.timingLabel,page:properties.page||window.location.hash.substring(1)||window.location.pathname}))});var dispatchToGa=function(){function dispatchToUniversal_(command,fieldsObj,shouldCopyHit){var gaNamespace=window.GoogleAnalyticsObject,userId=$analyticsProvider.settings.ga.userId;userId&&(fieldsObj.userId=userId),window[gaNamespace](command,fieldsObj),shouldCopyHit&&(userId&&!$analyticsProvider.settings.ga.additionalAccountHitTypes.userId&&delete fieldsObj.userId,angular.forEach($analyticsProvider.settings.ga.additionalAccountNames,function(accountName){var accountCommand=accountName+"."+command;window[gaNamespace](accountCommand,fieldsObj)}))}function dispatchToClassic_(command,fieldsObj,shouldCopyHit){if("set"===command)return console.log('Classic Analytics does not support the "set" command or Custom Dimensions. Command ignored.');var classicCommand;if("send"===command)switch(fieldsObj.hitType){case"pageview":classicCommand=["_trackPageview",fieldsObj.page];break;case"event":classicCommand=["_trackEvent",fieldsObj.category,fieldsObj.action,fieldsObj.label,fieldsObj.value,fieldsObj.nonInteraction];break;case"timing":classicCommand=["_trackTiming",fieldsObj.timingCategory,fieldsObj.timingVar,fieldsObj.timingValue,fieldsObj.timingLabel]}classicCommand||console.log("Unable to find command "+command+". Hit ignored."),window._gaq.push(classicCommand),shouldCopyHit&&angular.forEach($analyticsProvider.settings.ga.additionalAccountNames,function(accountName){classicCommand[0]=accountName+"."+classicCommand[0],window._gaq.push(classicCommand)})}var handler;return detectClassicAnalytics()&&(handler=dispatchToClassic_),detectUniversalAnalytics()&&(handler=dispatchToUniversal_),handler?function(command,fieldsObj){var hitType="event"===fieldsObj.hitType&&fieldsObj.isException?"error":fieldsObj.hitType,shouldCopyHit=$analyticsProvider.settings.ga.additionalAccountHitTypes[hitType];console.log(hitType),console.log(shouldCopyHit),console.log($analyticsProvider.settings.ga.additionalAccountHitTypes),handler(command,fieldsObj,shouldCopyHit)}:(console.log("Error: neither Classic nor Universal Analytics detected at bootstrap. Angulartics-GA will ignore all commands!"),angular.noop)}()}])}(window,window.angular);
//# sourceMappingURL=../dist/angulartics-ga.min.js.map